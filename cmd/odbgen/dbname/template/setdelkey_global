// TABLENAMEUpdateFIELDSetkey set key for map field of TABLENAME
func TABLENAMEUpdateFIELDSetkey(field map[interface{}]interface{}) error {
	var conditions []interface{}
	conditions = append(conditions, libovsdb.
		NewCondition("_uuid", "!=", libovsdb.UUID{GoUUID: InvalidUUID}))
	if _, num := SelectRows(TABLENAME, conditions); num != 1 {
		return fmt.Errorf("table %v not created yet", TABLENAME)
	}

	oMap, err := libovsdb.NewOvsMap(field)
	if err != nil {
		return fmt.Errorf("OvsMap trans error for %v", field)
	}

	var mutations []interface{}
	mutations = append(mutations, libovsdb.NewMutation(TABLENAMEFieldFIELD, opInsert, oMap))

	if MutateRows(TABLENAME, mutations, conditions) == 0 {
		return fmt.Errorf("Update field %v failed", field)
	}
	return nil
}

// TABLENAMEUpdateFIELDDelkey del key for map field of TABLENAME
func TABLENAMEUpdateFIELDDelkey(field map[interface{}]interface{}) error {
	var conditions []interface{}
	conditions = append(conditions, libovsdb.
		NewCondition("_uuid", "!=", libovsdb.UUID{GoUUID: InvalidUUID}))
	if _, num := SelectRows(TABLENAME, conditions); num != 1 {
		return fmt.Errorf("table %v not created yet", TABLENAME)
	}

	oMap, err := libovsdb.NewOvsMap(field)
	if err != nil {
		return fmt.Errorf("OvsMap trans error for %v", field)
	}

	var mutations []interface{}
	mutations = append(mutations, libovsdb.NewMutation(TABLENAMEFieldFIELD, opDelete, oMap))

	if MutateRows(TABLENAME, mutations, conditions) == 0 {
		return fmt.Errorf("Update field %v failed", field)
	}
	return nil
}