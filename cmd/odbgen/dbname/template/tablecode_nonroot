// TABLENAMEAddOp create TABLENAME
// return insert Operation for non-root table
func TABLENAMEAddOp(table TableTABLENAME) (libovsdb.Operation, error) {
	namedUUID, err := newRowUUID()
	if err != nil {
		return libovsdb.Operation{}, err
	}

	row, err := ConvertTableToRow(table, TABLENAMEFieldMapToColumn)
	if err != nil {
		return libovsdb.Operation{}, err
	}
	insertOp := libovsdb.Operation{
		Op:       opInsert,
		Table:    TABLENAME,
		Row:      row,
		UUIDName: namedUUID,
	}
	return insertOp, err
}

// TABLENAMESet set fields of TABLENAME
func TABLENAMESet(tableIndex interface{}, table TableTABLENAME) error {
	conditions, _ := convertIndexToConditions(tableIndex, TABLENAMEFieldMapToColumn)
	_, num := TABLENAMEGet(conditions)
	if num != 1 {
		return fmt.Errorf("table %v not exist", tableIndex)
	}

	rowsUpdate, err := ConvertTableToRow(table, TABLENAMEFieldMapToColumn)
	if err != nil {
		return err
	}
	if UpdateRows(TABLENAME, rowsUpdate, conditions) == 0 {
		return fmt.Errorf("Set fields %v failed", table)
	}
	return nil
}

// TABLENAMEGet get TABLENAME rows
func TABLENAMEGet(conditions []interface{}) ([]libovsdb.ResultRow, int) {
	return SelectRows(TABLENAME, conditions)
}

// TABLENAMEGetByIndex get TABLENAME by index
func TABLENAMEGetByIndex(tableIndex interface{}) (TableTABLENAME, error) {
	conditions, _ := convertIndexToConditions(tableIndex, TABLENAMEFieldMapToColumn)
	rows, num := TABLENAMEGet(conditions)
	if num != 1 {
		return TableTABLENAME{}, fmt.Errorf("table %v not exist", tableIndex)
	}
	table := ConvertRowToTABLENAME(rows[0])
	return table, nil
}

// TABLENAMEGetByUUID get TABLENAME by UUID
func TABLENAMEGetByUUID(uuid string) (TableTABLENAME, error) {
	var conditions []interface{}
	conditions = append(conditions, libovsdb.
		NewCondition("_uuid", "==", stringToGoUUID(uuid)))
	rows, num := TABLENAMEGet(conditions)
	if num != 1 {
		return TableTABLENAME{}, fmt.Errorf("table %v not exist", uuid)
	}
	table := ConvertRowToTABLENAME(rows[0])
	return table, nil
}

// TABLENAMEGetCount get TABLENAME count
func TABLENAMEGetCount() int {
	var conditions []interface{}
	conditions = append(conditions, libovsdb.
		NewCondition("_uuid", "!=", libovsdb.UUID{GoUUID: InvalidUUID}))
	_, num := TABLENAMEGet(conditions)
	return num
}

// TABLENAMEIterator traverse TABLENAME and call fn
// return traversed number
func TABLENAMEIterator(fn func(TableTABLENAME)) int {
	var conditions []interface{}
	conditions = append(conditions, libovsdb.
		NewCondition("_uuid", "!=", libovsdb.UUID{GoUUID: InvalidUUID}))
	rows, num := TABLENAMEGet(conditions)
	if num > 0 {
		for _, row := range rows {
			table := ConvertRowToTABLENAME(row)
			fn(table)
		}
	}
	return num
}

// TABLENAMESetField set field of TABLENAME
func TABLENAMESetField(tableIndex interface{}, field string, value interface{}) error {
	rowUpdate, err := convertFieldToRow(field, value)
	if err != nil {
		return err
	}
	conditions, _ := convertIndexToConditions(tableIndex, TABLENAMEFieldMapToColumn)
	if UpdateRows(TABLENAME, rowUpdate, conditions) == 0 {
		return fmt.Errorf("Set field %v failed", value)
	}
	return nil
}
