// TABLENAMEUpdateFIELDAddvalue add value for array field of TABLENAME
func TABLENAMEUpdateFIELDAddvalue(field []TYPE) error {
	var conditions []interface{}
	conditions = append(conditions, libovsdb.
		NewCondition("_uuid", "!=", libovsdb.UUID{GoUUID: InvalidUUID}))
	if _, num := SelectRows(TABLENAME, conditions); num != 1 {
		return fmt.Errorf("table %v not created yet", TABLENAME)
	}

	oSet, err := libovsdb.NewOvsSet(field)
	if err != nil {
		return fmt.Errorf("OvsSet trans error for %v", field)
	}

	var mutations []interface{}
	mutations = append(mutations, libovsdb.NewMutation(TABLENAMEFieldFIELD, opInsert, oSet))

	if MutateRows(TABLENAME, mutations, conditions) == 0 {
		return fmt.Errorf("Update field %v failed", field)
	}
	return nil
}

// TABLENAMEUpdateFIELDDelvalue del value for array field of TABLENAME
func TABLENAMEUpdateFIELDDelvalue(field []TYPE) error {
	var conditions []interface{}
	conditions = append(conditions, libovsdb.
		NewCondition("_uuid", "!=", libovsdb.UUID{GoUUID: InvalidUUID}))
	if _, num := SelectRows(TABLENAME, conditions); num != 1 {
		return fmt.Errorf("table %v not created yet", TABLENAME)
	}

	oSet, err := libovsdb.NewOvsSet(field)
	if err != nil {
		return fmt.Errorf("OvsSet trans error for %v", field)
	}

	var mutations []interface{}
	mutations = append(mutations, libovsdb.NewMutation(TABLENAMEFieldFIELD, opDelete, oSet))

	if MutateRows(TABLENAME, mutations, conditions) == 0 {
		return fmt.Errorf("Update field %v failed", field)
	}
	return nil
}
